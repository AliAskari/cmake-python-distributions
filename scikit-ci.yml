schema_version: "0.5.0"

before_install:

  appveyor:
    environment:
      PATH: $<PYTHON_DIR>;$<PYTHON_DIR>\\Scripts;$<PATH>
    commands:
      - python ../addons/appveyor/patch_vs2008.py

  circle:
    environment:
      PATH: /opt/python/$<MANYLINUX_PYTHON>/bin:$<PATH>
      SETUP_CMAKE_ARGS: -DOPENSSL_ROOT_DIR:PATH=/usr/local/ssl

  travis:
    osx:
      environment:
        PATH: $<HOME>/.pyenv/versions/$<PYTHON_VERSION>/bin:$<PATH>
        SETUP_BDIST_WHEEL_ARGS: --plat-name macosx-10.6-x86_64
      commands:
        - python ../addons/travis/install_pyenv.py
        - python ../addons/travis/install_cmake.py 3.11.0

install:
  commands:
    - python: |
              import os, subprocess
              branch = os.environ.get("CIRCLE_BRANCH", None)

              if branch is None:
                  branch = os.environ.get("TRAVIS_PULL_REQUEST_BRANCH", None)

              if branch is None:
                  branch = os.environ.get("APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH", None)

              print("branch [%s]" % branch)

              # Create test tag "X.Y.Z" if branch is named "update-to-cmake-X.Y.Z"
              create_test_tag = branch.startswith("update-to-cmake-")
              print("create_test_tag [%s]" % create_test_tag)

              if create_test_tag:
                  tag = branch.split("-")[3]
                  print("tag [%s]" % tag)

                  subprocess.check_call(['git', 'config', 'user.email', 'test@test'])
                  subprocess.check_call(['git', 'config', 'user.name', 'test'])
                  subprocess.check_call(['git', 'tag', '-m', 'test tag %s' % tag, tag])
    - python -c "import sys; print(sys.version)"
    - python -m pip install --disable-pip-version-check --upgrade pip
    - pip install -r requirements-dev.txt

before_build:
  commands:
    - flake8

build:
  commands:
    # Source distribution
    - python setup.py --hide-listing sdist
    # Built distribution (wheel)
    - python setup.py --hide-listing bdist_wheel $<SETUP_BDIST_WHEEL_ARGS> -- $<SETUP_CMAKE_ARGS>
    # Cleanup
    - python: |
              import glob, os
              if os.environ.get("UPLOAD_SDIST", "") == "":
                  sdist=(glob.glob("dist/*.tar.gz") + glob.glob("dist/*.zip"))[0]
                  print("Deleting [%s]" % sdist)
                  os.remove(sdist)

  circle:
    commands:
      - |
        # Since there are no external shared libraries to bundle into the wheels
        # this step will fixup the wheel switching from 'linux' to 'manylinux1' tag
        for whl in dist/*$(python -c "import wheel.pep425tags as w; print(w.get_platform())").whl; do
            auditwheel repair $whl -w ./dist/
            rm $whl
        done

test:
  commands:
    - python setup.py test

after_test:
  commands:
    - codecov -X gcov --required --file ./tests/coverage.xml || true
